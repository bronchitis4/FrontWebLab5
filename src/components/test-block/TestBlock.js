// import './testBlock.css'
// import TestBtn from '../test-btn/TestBtn';
// import {auth} from '../../firebase.js'
// import { onAuthStateChanged } from 'firebase/auth';
// import { useNavigate } from 'react-router-dom';
// import { useEffect } from 'react';

// const TestBlock = ({ numTests, graph }) => {
//     const arr = [];
//     const navigate = useNavigate();

//     for (let i = 0; i < numTests.length; i++) {
//         const backgroundValue = numTests[i] == 1 ? 'green' : 'transparent';
//         console.log(backgroundValue);
//         arr.push(<TestBtn key={i} id={i} style={{backgroundColor: backgroundValue }} />);
//     }

//     useEffect(() => {
//             onAuthStateChanged(auth, (user) => {
//                 if (user) {
//                     console.log(user.email);
//                 } else {
//                     console.log("User is signed out");
//                     navigate("/login");
//                 }
//             });
//     }, []);

//     return (
//         <section id="test__list">
//             {graph}
//             <div className="themes__tests">
//                 <h1>–¢–µ—Å—Ç–∏ –ø–æ —Ç–µ–º–∞—Ö</h1>
//                 {arr}
//             </div>
//             {/* <div className="generals__test">
//                 <h1>–ó–∞–≥–∞–ª—å–Ω–∏–π —Ç–µ—Å—Ç</h1>
//                 <a href="test.html" className="test__button">–ó–∞–≥.</a>
//             </div> */}
//         </section>
//     );
// };

// export default TestBlock;


import './testBlock.css'
import TestBtn from '../test-btn/TestBtn';
import { auth } from '../../firebase.js'
import { onAuthStateChanged } from 'firebase/auth';
import { useNavigate } from 'react-router-dom';
import { useEffect, useState } from 'react';

const TestBlock = ({ numTests, graph }) => {
    const [averageScore, setAverageScore] = useState(null);
    const navigate = useNavigate();
    const arr = [];

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç—ñ–≤
    for (let i = 0; i < numTests.length; i++) {
        const backgroundValue = numTests[i] === 1 ? 'green' : 'transparent';
        arr.push(<TestBtn key={i} id={i} style={{ backgroundColor: backgroundValue }} />);
    }

    useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (user) => {
        if (user) {
            const email = user.email;
            console.log("User email:", email);

            try {
                // ‚¨áÔ∏è –û—Ç—Ä–∏–º—É—î–º–æ Firebase ID —Ç–æ–∫–µ–Ω
                const token = await user.getIdToken();
                console.log(token);
                // ‚¨áÔ∏è –î–æ–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω –¥–æ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –∑–∞–ø–∏—Ç—É
                const response = await fetch(`https://serverweblab5.onrender.com/historical-platform/test-results/average/${email}`, {
                    method: 'GET',
                    headers: {
                        Authorization: `Bearer ${token}`, // üîê –¢–æ–∫–µ–Ω
                        'Content-Type': 'application/json'
                    }
                });

                const data = await response.json();

                if (data.succesful) {
                    setAverageScore(data.data.averagePercentage);
                } else {
                    setAverageScore(null);
                }
            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ –±–∞–ª—É:', error);
                setAverageScore(null);
            }
        } else {
            console.log("User is signed out");
            navigate("/login");
        }
    });

    // –û—á–∏—Å—Ç–∫–∞ —Å–ª—É—Ö–∞—á–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Ç–∞–∂—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => unsubscribe();
}, [navigate]);


    return (
        <section id="test__list">
             {averageScore !== null ? (
                        <p>–°–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª –ø—Ä–æ–π–¥–µ–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤: <strong>{averageScore}%</strong></p>
                    ) : (
                        <p>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</p>
                    )}
            {/*graph*/}
            <div className="themes__tests">
                <h1>–¢–µ—Å—Ç–∏ –ø–æ —Ç–µ–º–∞—Ö</h1>
                {/* –í–∏–≤–æ–¥–∏–º–æ —Å–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª */}
                   
               
                {arr}
            </div>
        </section>
    );
};

export default TestBlock;
